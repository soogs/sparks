# a function that figures out the lambda value (the same for each component),
# given the number of zeros that you want for each component

# 1. i want to match the number of zeros for all my components
# 2. i want to decrease the loss as much as possible

source("/home/soogs/Desktop/Rstudio Github/SPCA-W-P/spca-defiled function.R")

findLasso <- function(dat, zeros, R, init, ridge = 1e-6, maxItr){
  # zeros should be a vector
  
  estimatedzeros <- rep(0,R)
  lassou <- rep(init, R)
  lassol <- rep(0, R)
  lasso <- rep(init,R)
  
  converged <- FALSE
  for (j in 1:R){
    
    i <- 0
    
    while( abs(zeros[j] - estimatedzeros[j]) > 0 && i <= maxItr ){
    
      lasso[j] <- (lassol[j] + lassou[j])/2
      
      # lasso[-j] <- 0
      
      fit <-  spca.defiled(x = dat, K = R, para = lasso, type = "predictor", sparse = "penalty", inits = "SVD", lambda = ridge)
      
      estimatedzeros[j] <- sum(abs(fit$Wraw[,j]) < 0.000001)
      
      if(zeros[j] > estimatedzeros[j]){
        lassol[j]  <- lasso[j]
        
      } else {
        lassou[j]  <- lasso[j]
      }
      print(round(lasso,10))
      i <- i + 1 # iteration counter
    }
  }
  if( i < maxItr ){
    converged <- TRUE
  } 
  
  return(list(lasso = lasso, converged = converged))
}